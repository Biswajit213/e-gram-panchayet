// Firestore Security Rules for Digital E Gram Panchayat
// Copy and paste these rules into your Firebase Console > Firestore Database > Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to get user role
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }
    
    // Helper function to check if user is staff
    function isStaff() {
      return isAuthenticated() && getUserRole() == 'staff';
    }
    
    // Helper function to check if user is staff or admin
    function isStaffOrAdmin() {
      return isAuthenticated() && getUserRole() in ['staff', 'admin'];
    }
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if isAuthenticated() && request.auth.uid == userId;
      allow read: if isStaffOrAdmin(); // Staff and admin can read all users
      allow write: if isAdmin(); // Only admin can modify other users
    }
    
    // Services collection
    match /services/{serviceId} {
      allow read: if true; // Anyone can read services (for public display)
      allow create, update, delete: if isAdmin(); // Only admin can manage services
    }
    
    // Applications collection
    match /applications/{applicationId} {
      // Users can read their own applications
      allow read: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isStaffOrAdmin());
      
      // Users can create applications for themselves
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      
      // Users can update their own applications (for document uploads, etc.)
      allow update: if isAuthenticated() && 
        (resource.data.userId == request.auth.uid || isStaffOrAdmin());
      
      // Only staff and admin can delete applications
      allow delete: if isStaffOrAdmin();
    }
    
    // System logs collection (admin only)
    match /logs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Staff and admin can create notifications
      allow create: if isStaffOrAdmin();
      
      // Users can update their own notifications (mark as read)
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Admin can delete notifications
      allow delete: if isAdmin();
    }
    
    // Settings collection (admin only)
    match /settings/{settingId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Reports collection (staff and admin only)
    match /reports/{reportId} {
      allow read, write: if isStaffOrAdmin();
    }
    
    // Feedback collection
    match /feedback/{feedbackId} {
      // Users can create feedback
      allow create: if isAuthenticated();
      
      // Users can read their own feedback
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Staff and admin can read all feedback
      allow read: if isStaffOrAdmin();
      
      // Only admin can delete feedback
      allow delete: if isAdmin();
    }
  }
}

// Storage Security Rules (for file uploads)
// Copy these rules to Firebase Console > Storage > Rules

rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Application documents
    match /applications/{userId}/{applicationId}/{fileName} {
      // Users can upload documents for their own applications
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
      
      // Staff and admin can read all application documents
      allow read: if request.auth != null && 
        (getUserRole() == 'staff' || getUserRole() == 'admin');
    }
    
    // Profile pictures
    match /profiles/{userId}/{fileName} {
      // Users can upload their own profile pictures
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
      
      // Staff and admin can read all profile pictures
      allow read: if request.auth != null && 
        (getUserRole() == 'staff' || getUserRole() == 'admin');
    }
    
    // Service images (admin only)
    match /services/{serviceId}/{fileName} {
      allow read: if true; // Anyone can read service images
      allow write: if request.auth != null && 
        getUserRole() == 'admin';
    }
    
    // System files (admin only)
    match /system/{fileName} {
      allow read, write: if request.auth != null && 
        getUserRole() == 'admin';
    }
    
    // Helper function to get user role from Firestore
    function getUserRole() {
      return firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role;
    }
  }
}

// Additional Security Considerations:

// 1. Email Verification (Optional)
// Add this condition to require email verification:
// && request.auth.token.email_verified == true

// 2. Rate Limiting
// Consider implementing rate limiting for sensitive operations

// 3. Data Validation
// Add field validation rules like:
// allow create: if isAuthenticated() && 
//   request.resource.data.keys().hasAll(['name', 'email', 'phone']) &&
//   request.resource.data.name is string &&
//   request.resource.data.email.matches('.*@.*\\..*');

// 4. Time-based Rules
// Add time restrictions if needed:
// && request.time < timestamp.date(2025, 12, 31)

// 5. IP-based Restrictions (Advanced)
// For high-security environments, consider IP whitelisting

// How to Apply These Rules:
// 1. Go to Firebase Console > Firestore Database > Rules
// 2. Replace existing rules with the Firestore rules above
// 3. Go to Firebase Console > Storage > Rules  
// 4. Replace existing rules with the Storage rules above
// 5. Click "Publish" for both rule sets

// Testing Your Rules:
// 1. Use the Rules Playground in Firebase Console
// 2. Test different user roles and scenarios
// 3. Monitor the Firebase Console for rule violations
// 4. Check browser console for security errors
